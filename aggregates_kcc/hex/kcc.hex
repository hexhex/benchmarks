assign(X,C) v -assign(X,C) :- node(X), colour(C).
:- assign(X,C1), assign(X,C2), C1 != C2.
assigned(X) :- assign(X,C).
:- node(X), not assigned(X).

% guess clique
in(X) v out(X) :- node(X).

%:- not in(1). :- not in(2). :- not in(3). :- in(4). :- in(5).
assign(1,black). assign(2,black). assign(5,black). assign(3,white). assign(4,black).

% each guess must satisfy one of the below conditions
:- not saturate.
in(X) :- node(X), saturate.
out(X) :- node(X), saturate.

% guessed set is not a clique
saturate :- in(X), in(Y), X != Y, not link(X,Y).

% there is a node X which is not in the clique but connected to all nodes in the clique (=> clique is not maximal)
s(2,Y,X) :- link(X,Y), in(Y), node(X), out(X).
s(0,Y,X) :- node(Y), in(Y), X != Y, node(X), out(X).
%s(N2,sat,X) :- N=#count{ Y : node(Y) }, N2=N*2, node(X), #int(N).
s(10,sat,X) :- node(X), out(X), saturate.
saturate :- #avg{ V,Y : s(V,Y,X)  } >= 1, node(X), out(X).

% clique uses two colours
saturate :- in(X), in(Y), assign(X,CX), assign(Y,CY), CX != CY.
link(X,Y) :- link(Y,X).



node(X) :- link(X,Y).
node(Y) :- link(X,Y).

link(1,2).
link(1,3).
link(2,3).
link(3,4).
link(3,5).
link(4,5).

colour(black).
colour(white).

% 18 stable models

